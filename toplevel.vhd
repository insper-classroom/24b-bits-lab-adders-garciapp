-- File: toplevel.vhd
-- Generated by MyHDL 0.11.49
-- Date: Tue Sep 24 17:52:39 2024


library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use std.textio.all;

use work.pck_myhdl_011.all;

entity toplevel is
    port (
        LEDR: out unsigned(9 downto 0);
        SW: in unsigned(9 downto 0);
        KEY: in unsigned(3 downto 0);
        HEX0: out unsigned(6 downto 0);
        HEX1: in unsigned(6 downto 0);
        HEX2: in unsigned(6 downto 0);
        HEX3: in unsigned(6 downto 0);
        HEX4: in unsigned(6 downto 0);
        HEX5: in unsigned(6 downto 0);
        CLOCK_50: in std_logic;
        RESET_N: in std_logic
    );
end entity toplevel;


architecture MyHDL of toplevel is



signal ledr_bin: unsigned(3 downto 0);
type t_array_ledr_s is array(0 to 10-1) of std_logic;
signal ledr_s: t_array_ledr_s;
type t_array_adder0_c is array(0 to 5-1) of std_logic;
signal adder0_c: t_array_adder0_c;
type t_array_adder0_fullAdder0_s is array(0 to 3-1) of std_logic;
signal adder0_fullAdder0_s: t_array_adder0_fullAdder0_s;
type t_array_adder0_fullAdder1_s is array(0 to 3-1) of std_logic;
signal adder0_fullAdder1_s: t_array_adder0_fullAdder1_s;
type t_array_adder0_fullAdder2_s is array(0 to 3-1) of std_logic;
signal adder0_fullAdder2_s: t_array_adder0_fullAdder2_s;
type t_array_adder0_fullAdder3_s is array(0 to 3-1) of std_logic;
signal adder0_fullAdder3_s: t_array_adder0_fullAdder3_s;

begin


ledr_bin <= to_unsigned(0, 4);



adder0_fullAdder0_s(0) <= (SW(0) xor SW(6));
adder0_fullAdder0_s(1) <= (SW(0) and SW(6));


ledr_s(0) <= ('0' xor adder0_fullAdder0_s(0));
adder0_fullAdder0_s(2) <= ('0' and adder0_fullAdder0_s(0));


adder0_c(1) <= (adder0_fullAdder0_s(1) or adder0_fullAdder0_s(2));


adder0_fullAdder1_s(0) <= (SW(1) xor SW(7));
adder0_fullAdder1_s(1) <= (SW(1) and SW(7));


ledr_s(1) <= (adder0_c(1) xor adder0_fullAdder1_s(0));
adder0_fullAdder1_s(2) <= (adder0_c(1) and adder0_fullAdder1_s(0));


adder0_c(2) <= (adder0_fullAdder1_s(1) or adder0_fullAdder1_s(2));


adder0_fullAdder2_s(0) <= (SW(2) xor SW(8));
adder0_fullAdder2_s(1) <= (SW(2) and SW(8));


ledr_s(2) <= (adder0_c(2) xor adder0_fullAdder2_s(0));
adder0_fullAdder2_s(2) <= (adder0_c(2) and adder0_fullAdder2_s(0));


adder0_c(3) <= (adder0_fullAdder2_s(1) or adder0_fullAdder2_s(2));


adder0_fullAdder3_s(0) <= (SW(3) xor SW(9));
adder0_fullAdder3_s(1) <= (SW(3) and SW(9));


ledr_s(3) <= (adder0_c(3) xor adder0_fullAdder3_s(0));
adder0_fullAdder3_s(2) <= (adder0_c(3) and adder0_fullAdder3_s(0));


adder0_c(4) <= (adder0_fullAdder3_s(1) or adder0_fullAdder3_s(2));


ledr_s(9) <= adder0_c(4);

TOPLEVEL_BIN2HEX0_LOGIC: process (ledr_bin) is
begin
    case ledr_bin is
        when "0000" =>
            HEX0 <= to_unsigned(string'("0111111"), 7);
        when "0001" =>
            HEX0 <= to_unsigned(string'("0000110"), 7);
        when "0010" =>
            HEX0 <= to_unsigned(string'("1011011"), 7);
        when "0011" =>
            HEX0 <= to_unsigned(string'("1001111"), 7);
        when "0100" =>
            HEX0 <= to_unsigned(string'("1100110"), 7);
        when "0101" =>
            HEX0 <= to_unsigned(string'("1101101"), 7);
        when "0110" =>
            HEX0 <= to_unsigned(string'("1111101"), 7);
        when "0111" =>
            HEX0 <= to_unsigned(string'("0000111"), 7);
        when "1000" =>
            HEX0 <= to_unsigned(string'("1111111"), 7);
        when "1001" =>
            HEX0 <= to_unsigned(string'("1101111"), 7);
        when "1010" =>
            HEX0 <= to_unsigned(string'("1110111"), 7);
        when "1011" =>
            HEX0 <= to_unsigned(string'("1111100"), 7);
        when "1100" =>
            HEX0 <= to_unsigned(string'("0111001"), 7);
        when "1101" =>
            HEX0 <= to_unsigned(string'("1011110"), 7);
        when "1110" =>
            HEX0 <= to_unsigned(string'("1111001"), 7);
        when "1111" =>
            HEX0 <= to_unsigned(string'("1110001"), 7);
        when others =>
            HEX0 <= to_unsigned(string'("0000000"), 7);
    end case;
end process TOPLEVEL_BIN2HEX0_LOGIC;

TOPLEVEL_COMB: process (ledr_s) is
begin
    for i in 0 to 10-1 loop
        LEDR(i) <= ledr_s(i);
    end loop;
end process TOPLEVEL_COMB;

end architecture MyHDL;
